#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–∞.
"""

import sys
import json
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).resolve().parent))

from agents.manager import ManagerAgent
from tools.news_tools import get_top_news
from utils.logger import info, error, warning
from config import SCRIPTWRITERS

def validate_script_format(script, script_id):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è."""
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –°–¶–ï–ù–ê–†–ò–Ø {script_id}:")
    print("-" * 40)
    
    errors = []
    warnings = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    required_fields = ['title', 'description', 'panels', 'caption', 'writer_type', 'writer_name']
    for field in required_fields:
        if field not in script:
            errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}")
        else:
            print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    if 'title' in script:
        title = script['title']
        print(f"\nüìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
        if not title or title == "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞":
            warnings.append("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π")
            print("   ‚ö†Ô∏è  –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
    if 'description' in script:
        desc = script['description']
        print(f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {desc[:100]}...")
        if not desc or desc == "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è":
            warnings.append("–û–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ")
            print("   ‚ö†Ô∏è  –û–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–Ω–µ–ª–µ–π
    if 'panels' in script:
        panels = script['panels']
        print(f"\nüìä –ü–∞–Ω–µ–ª–∏: {len(panels)} —à—Ç.")
        
        if len(panels) != 4:
            errors.append(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π: {len(panels)} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 4)")
            print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π: {len(panels)}")
        
        for i, panel in enumerate(panels):
            print(f"\n   –ü–∞–Ω–µ–ª—å {i+1}:")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏
            if 'description' not in panel:
                errors.append(f"–ü–∞–Ω–µ–ª—å {i+1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ")
                print(f"      ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ")
            else:
                desc = panel['description']
                if not desc or desc == "[–û–ø–∏—Å–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ]":
                    warnings.append(f"–ü–∞–Ω–µ–ª—å {i+1}: –æ–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ")
                    print(f"      ‚ö†Ô∏è  –û–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ")
                else:
                    print(f"      ‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: {desc[:50]}...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤
            if 'dialog' in panel and panel['dialog']:
                print(f"      ‚úÖ –î–∏–∞–ª–æ–≥–∏: {len(panel['dialog'])} —Ä–µ–ø–ª–∏–∫")
                for dialog in panel['dialog']:
                    if not isinstance(dialog, dict) or 'character' not in dialog or 'text' not in dialog:
                        errors.append(f"–ü–∞–Ω–µ–ª—å {i+1}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ª–æ–≥–∞")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ä—Ä–∞—Ç–∏–≤–∞
            if 'narration' in panel and panel['narration']:
                print(f"      ‚úÖ –¢–µ–∫—Å—Ç –æ—Ç –∞–≤—Ç–æ—Ä–∞: {panel['narration'][:30]}...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            has_dialog = bool(panel.get('dialog'))
            has_narration = bool(panel.get('narration'))
            has_description = bool(panel.get('description') and 
                                 panel['description'] != "[–û–ø–∏—Å–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ]")
            
            if not has_dialog and not has_narration and not has_description:
                errors.append(f"–ü–∞–Ω–µ–ª—å {i+1}: –Ω–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
                print(f"      ‚ùå –ü–∞–Ω–µ–ª—å –ø—É—Å—Ç–∞—è - –Ω–µ—Ç –Ω–∏ –æ–ø–∏—Å–∞–Ω–∏—è, –Ω–∏ –¥–∏–∞–ª–æ–≥–æ–≤, –Ω–∏ —Ç–µ–∫—Å—Ç–∞")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
    if 'caption' in script:
        caption = script['caption']
        print(f"\nüìù –ü–æ–¥–ø–∏—Å—å: {caption}")
        if not caption or caption == "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏":
            warnings.append("–ü–æ–¥–ø–∏—Å—å –ø—É—Å—Ç–∞—è –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è")
            print("   ‚ö†Ô∏è  –ü–æ–¥–ø–∏—Å—å –ø—É—Å—Ç–∞—è –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    print(f"\nüìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:")
    if 'writer_type' in script:
        print(f"   ‚úÖ –¢–∏–ø —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç–∞: {script['writer_type']}")
    if 'writer_name' in script:
        print(f"   ‚úÖ –ò–º—è —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç–∞: {script['writer_name']}")
    
    return {
        'script_id': script_id,
        'valid': len(errors) == 0,
        'errors': errors,
        'warnings': warnings
    }

def test_scripts_format():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞."""
    
    print("\n" + "="*80)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–¢–ê–ü–ê 2: –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–¶–ï–ù–ê–†–ò–ï–í")
    print("="*80 + "\n")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
    news = get_top_news(force_new=False)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω–æ–≤–æ—Å—Ç—å
    
    if not news:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å!")
        return False
    
    print(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∞: {news['title'][:50]}...")
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    print("\nü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–º–∏–∫—Å–æ–≤...")
    manager = ManagerAgent()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
    print("\nüé≠ –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–¶–ï–ù–ê–†–ò–ï–í:")
    print("-" * 40)
    print(f"–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {len(SCRIPTWRITERS)} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
    manager.news = news
    scripts = manager.generate_scripts()
    
    if not scripts:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏!")
        return False
    
    print(f"\n‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(scripts)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–∞–∂–¥–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
    print("\n" + "="*80)
    print("üìã –ü–†–û–í–ï–†–ö–ê –§–û–†–ú–ê–¢–ê –°–¶–ï–ù–ê–†–ò–ï–í:")
    print("="*80)
    
    validation_results = []
    for i, script in enumerate(scripts):
        script_id = script.get('script_id', f'script_{i+1}')
        result = validate_script_format(script, script_id)
        validation_results.append(result)
    
    # –û—Ü–µ–Ω–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    print("\n" + "="*80)
    print("‚öñÔ∏è –û–¶–ï–ù–ö–ê –°–¶–ï–ù–ê–†–ò–ï–í –ñ–Æ–†–ò:")
    print("="*80)
    
    print("\nüéØ –ó–∞–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
    manager.scripts = scripts
    evaluations = manager.evaluate_scripts()
    
    if evaluations:
        print(f"\n‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –æ—Ü–µ–Ω–æ–∫: {len(evaluations)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø-4
        print("\nüèÜ –¢–û–ü-4 –°–¶–ï–ù–ê–†–ò–Ø:")
        print("-" * 40)
        
        sorted_scripts = sorted(
            evaluations.items(),
            key=lambda x: x[1]['average_score'],
            reverse=True
        )[:4]
        
        for i, (script_id, eval_data) in enumerate(sorted_scripts):
            print(f"\n{i+1}. –°—Ü–µ–Ω–∞—Ä–∏–π {script_id}:")
            print(f"   –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {eval_data['average_score']:.1f}")
            print(f"   –ê–≤—Ç–æ—Ä: {eval_data.get('writer_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            script = next((s for s in scripts if s.get('script_id') == script_id), None)
            if script:
                print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {script.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\nüíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("-" * 40)
    
    test_file = Path("data/test_results/test_scripts_format.json")
    test_file.parent.mkdir(parents=True, exist_ok=True)
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    test_data = {
        'timestamp': datetime.now().isoformat(),
        'news_title': news['title'],
        'scripts_count': len(scripts),
        'validation_results': validation_results,
        'top_4_scripts': [
            {
                'script_id': script_id,
                'average_score': eval_data['average_score'],
                'writer_name': eval_data.get('writer_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'),
                'title': next((s.get('title') for s in scripts if s.get('script_id') == script_id), '–ù–µ –Ω–∞–π–¥–µ–Ω')
            }
            for script_id, eval_data in sorted_scripts
        ] if evaluations else [],
        'summary': {
            'total_scripts': len(scripts),
            'valid_scripts': sum(1 for r in validation_results if r['valid']),
            'scripts_with_errors': sum(1 for r in validation_results if not r['valid']),
            'scripts_with_warnings': sum(1 for r in validation_results if r['warnings'])
        }
    }
    
    with open(test_file, 'w', encoding='utf-8') as f:
        json.dump(test_data, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {test_file}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    scripts_file = Path("data/test_results/test_scripts_full.json")
    with open(scripts_file, 'w', encoding='utf-8') as f:
        json.dump({
            'timestamp': datetime.now().isoformat(),
            'scripts': scripts,
            'evaluations': evaluations
        }, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –ü–æ–ª–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {scripts_file}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "="*80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("="*80)
    
    total_errors = sum(len(r['errors']) for r in validation_results)
    total_warnings = sum(len(r['warnings']) for r in validation_results)
    
    print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"- –í—Å–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(scripts)}")
    print(f"- –í–∞–ª–∏–¥–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {sum(1 for r in validation_results if r['valid'])}")
    print(f"- –°—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {sum(1 for r in validation_results if not r['valid'])}")
    print(f"- –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {total_errors}")
    print(f"- –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {total_warnings}")
    
    if total_errors == 0:
        print(f"\n‚úÖ –í–°–ï –°–¶–ï–ù–ê–†–ò–ò –ü–†–û–®–õ–ò –í–ê–õ–ò–î–ê–¶–ò–Æ!")
    else:
        print(f"\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –û–®–ò–ë–ö–ò –í –§–û–†–ú–ê–¢–ê–•!")
        for result in validation_results:
            if result['errors']:
                print(f"\n   –°—Ü–µ–Ω–∞—Ä–∏–π {result['script_id']}:")
                for error in result['errors']:
                    print(f"   - {error}")
    
    return total_errors == 0

if __name__ == "__main__":
    try:
        success = test_scripts_format()
        if success:
            print("\n‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            sys.exit(0)
        else:
            print("\n‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω!")
            sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
