"""
Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∏–∫—Å–æ–≤ DailyComicBot.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π workflow —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ.
"""

import os
import sys
import asyncio
import logging
from datetime import datetime
from typing import Dict, Any, Optional, List
from pathlib import Path

# –ü—Ä–∏–º–µ–Ω—è–µ–º nest_asyncio –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å event loop (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
try:
    import nest_asyncio
    nest_asyncio.apply()
except ImportError:
    pass  # nest_asyncio –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ

# Telegram Bot API
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).resolve().parent))
from agents.manager import get_manager
from utils import logger, important_logger
from tools.publishing_tools import publish_comic_to_channel
import config
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_ADMIN_CHAT_ID = os.getenv("TELEGRAM_ADMIN_CHAT_ID")
SCRIPTWRITERS = config.SCRIPTWRITERS

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
NEWS_COLLECTION_HOUR = int(os.getenv("NEWS_COLLECTION_HOUR", "13"))
NEWS_COLLECTION_MINUTE = int(os.getenv("NEWS_COLLECTION_MINUTE", "0"))
PUBLICATION_TIME_HOUR = int(os.getenv("PUBLICATION_TIME_HOUR", "13"))
PUBLICATION_TIME_MINUTE = int(os.getenv("PUBLICATION_TIME_MINUTE", "15"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Telegram –±–æ—Ç–∞
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
telegram_logger = logging.getLogger(__name__)

# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram").setLevel(logging.WARNING)


class ComicBotTelegram:
    """Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∏–∫—Å–æ–≤."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞."""
        self.app = None
        self.manager = get_manager()
        self.admin_chat_id = TELEGRAM_ADMIN_CHAT_ID
        self.rejected_news_list = []  # –°–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
        if not self._is_admin(update):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
            return
            
        keyboard = [
            [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤—Ä—É—á–Ω—É—é", callback_data="manual_start")],
            [InlineKeyboardButton("üé≠ –°–æ–∑–¥–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç", callback_data="create_joke")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="show_status")],
            [InlineKeyboardButton("üß™ –¢–µ—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data="test_publish")],
            [InlineKeyboardButton("‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data="schedule_settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üé≠ *DailyComicBot Control Panel*\n\n"
            f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º: –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {NEWS_COLLECTION_HOUR:02d}:{NEWS_COLLECTION_MINUTE:02d} —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–æ—Å—Ç, –≤ {PUBLICATION_TIME_HOUR:02d}:{PUBLICATION_TIME_MINUTE:02d} –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è\n"
            "üîß –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º: –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ª–∞–¥–∫–∏\n"
            "üé≠ –ê–Ω–µ–∫–¥–æ—Ç—ã: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–Ω—è\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å."""
        if not self._is_admin(update):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
            return
            
        status_text = "üìä *–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:*\n\n"
        
        if hasattr(self.manager, 'news') and self.manager.news:
            status_text += "‚úÖ –ù–æ–≤–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∞\n"
        else:
            status_text += "‚≠ï –ù–æ–≤–æ—Å—Ç—å –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞\n"
            
        if hasattr(self.manager, 'scripts') and self.manager.scripts:
            status_text += f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã ({len(self.manager.scripts)} —à—Ç.)\n"
        else:
            status_text += "‚≠ï –°—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã\n"
            
        if hasattr(self.manager, 'winner_script') and self.manager.winner_script:
            status_text += "‚úÖ –õ—É—á—à–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤—ã–±—Ä–∞–Ω\n"
        else:
            status_text += "‚≠ï –õ—É—á—à–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –≤—ã–±—Ä–∞–Ω\n"
            
        if hasattr(self.manager, 'image_path') and self.manager.image_path:
            status_text += "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ\n"
        else:
            status_text += "‚≠ï –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ\n"
            
        if hasattr(self.manager, 'publication_results') and self.manager.publication_results:
            status_text += "‚úÖ –ö–æ–º–∏–∫—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω\n"
        else:
            status_text += "‚≠ï –ö–æ–º–∏–∫—Å –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω\n"
            
        await update.message.reply_text(status_text, parse_mode='Markdown')
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
        query = update.callback_query
        await query.answer()
        
        if not self._is_admin_callback(query):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
            return
        
        action = query.data
        
        # –ù–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        if action == "manual_start":
            await self._manual_start(query)
        elif action == "show_status":
            await self._show_status(query)
        elif action == "test_publish":
            await self._test_publish(query)
        elif action == "schedule_settings":
            await self._show_schedule_settings(query)
        
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        elif action == "regenerate_news":
            await self._regenerate_news(query)
        elif action == "continue_with_news":
            await self._continue_with_scripts(query)
        elif action == "regenerate_scripts":
            await self._regenerate_scripts(query)
        elif action == "continue_with_script":
            await self._continue_with_image(query)
        elif action == "regenerate_image":
            await self._regenerate_image(query)
        elif action == "regenerate_all_images":
            await self._regenerate_all_images(query)
        elif action == "approve_publication":
            await self._approve_publication(query)
        elif action == "restart_full":
            await self._restart_full_process(query)
        elif action == "back_to_menu":
            await self._back_to_menu(query)
        
        # –ù–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        elif action.startswith("select_image_"):
            rank = int(action.split("_")[-1])
            await self._select_image_by_rank(query, rank)
        
        # ===== –ù–û–í–´–ï –î–ï–ô–°–¢–í–ò–Ø –î–õ–Ø –ê–ù–ï–ö–î–û–¢–û–í (–ù–ï –ò–ó–ú–ï–ù–Ø–Æ–¢ –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ) =====
        elif action == "create_joke":
            await self._create_joke(query)
        elif action == "regenerate_jokes":
            await self._regenerate_jokes(query)
        elif action.startswith("select_joke_"):
            author_type = action.split("_")[-1]
            await self._select_joke(query, author_type)
        elif action == "publish_joke_now":
            await self._publish_joke_now(query)
        elif action == "schedule_joke":
            await self._schedule_joke(query)
        elif action == "approve_joke_publication":
            await self._approve_joke_publication(query)
    
    
    async def _continue_with_scripts(self, query=None):
        """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤."""
        try:
            if query:
                await query.edit_message_text("‚úçÔ∏è –°–æ–∑–¥–∞—é —Å—Ü–µ–Ω–∞—Ä–∏–∏...")
            else:
                await self._send_status_message("‚úçÔ∏è –°–æ–∑–¥–∞—é —Å—Ü–µ–Ω–∞—Ä–∏–∏...")
            
            # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏
            if self.rejected_news_list:
                telegram_logger.info(f"üßπ –û—á–∏—â–∞—é —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π ({len(self.rejected_news_list)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
                self.rejected_news_list.clear()
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            scripts = self.manager.generate_scripts()
            if not scripts:
                await self._send_error_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏")
                return
            
            # –û—Ü–µ–Ω–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            evaluations = self.manager.evaluate_scripts()
            if not evaluations:
                await self._send_error_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏")
                return
            
            # –í—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            winner = self.manager.select_winner()
            if not winner:
                await self._send_error_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π")
                return
            
            # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º —Ç–æ–ø-4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            await self._send_status_message("üñºÔ∏è –°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–ø-4 —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-4 —Å—Ü–µ–Ω–∞—Ä–∏—è
            top_scripts = self.manager.select_top_scripts(4)
            if not top_scripts:
                await self._send_error_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ø —Å—Ü–µ–Ω–∞—Ä–∏–∏")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–æ–ø —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            image_results = self.manager.create_images_for_top_scripts(top_scripts)
            if image_results and any(r["success"] for r in image_results):
                await self._send_multiple_images_result(image_results)
            else:
                await self._send_error_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                
        except Exception as e:
            await self._send_error_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {str(e)}")
    
    async def _continue_with_image(self, query=None):
        """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–æ–ø-4 —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤."""
        try:
            if query:
                await query.edit_message_text("üñºÔ∏è –°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–ø-4 —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
            else:
                await self._send_status_message("üñºÔ∏è –°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–ø-4 —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-4 —Å—Ü–µ–Ω–∞—Ä–∏—è
            top_scripts = self.manager.select_top_scripts(4)
            if not top_scripts:
                await self._send_error_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ø —Å—Ü–µ–Ω–∞—Ä–∏–∏")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–æ–ø —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            image_results = self.manager.create_images_for_top_scripts(top_scripts)
            if image_results:
                await self._send_multiple_images_result(image_results)
            else:
                await self._send_error_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                
        except Exception as e:
            await self._send_error_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}")
    
    async def _send_news_result(self, news: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏."""
        text = f"üì∞ *–ù–æ–≤–æ—Å—Ç—å –¥–Ω—è –ø–æ–ª—É—á–µ–Ω–∞:*\n\n"
        text += f"*{news.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}*\n\n"
        
        content = news.get('content', '–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è')
        if len(content) > 800:
            text += f"{content[:800]}...\n\n"
        else:
            text += f"{content}\n\n"
        
        text += "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?"
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç—å—é", callback_data="continue_with_news")],
            [InlineKeyboardButton("üîÑ –ü–æ–ª—É—á–∏—Ç—å –¥—Ä—É–≥—É—é –Ω–æ–≤–æ—Å—Ç—å", callback_data="regenerate_news")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.app.bot.send_message(
            chat_id=self.admin_chat_id,
            text=text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    async def _send_news_for_approval(self, news: Dict[str, Any]):
        """–ù–û–í–ê–Ø –§–ò–ß–ê: –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤."""
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
        def escape_markdown(text):
            """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Telegram Markdown."""
            if not text:
                return ""
            # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            text = str(text)
            # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
            import re
            text = re.sub(r'<[^>]+>', '', text)
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
            special_chars = ['*', '_', '`', '[', ']', '(', ')', '~', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
            for char in special_chars:
                text = text.replace(char, f'\\{char}')
            return text
        
        title = escape_markdown(news.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'))
        content = escape_markdown(news.get('content', '–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è'))
        
        text = f"üì∞ *–ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å:*\n\n"
        text += f"*{title}*\n\n"
        
        if len(content) > 800:
            text += f"{content[:800]}\\.\\.\\.\n\n"
        else:
            text += f"{content}\n\n"
        
        text += "–ù—Ä–∞–≤–∏—Ç—Å—è –Ω–æ–≤–æ—Å—Ç—å? –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∏–∫—Å–∞ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –¥—Ä—É–≥—É—é?"
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç—å—é", callback_data="continue_with_news")],
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å", callback_data="regenerate_news")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.app.bot.send_message(
            chat_id=self.admin_chat_id,
            text=text,
            parse_mode='MarkdownV2',
            reply_markup=reply_markup
        )
    
    async def _send_script_result(self, winner: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è."""
        script = winner['script']
        
        text = f"‚úçÔ∏è *–õ—É—á—à–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤—ã–±—Ä–∞–Ω:*\n\n"
        text += f"*{script.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}*\n"
        text += f"–ê–≤—Ç–æ—Ä: {script.get('writer_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
        text += f"–û—Ü–µ–Ω–∫–∞ –∂—é—Ä–∏: {winner.get('average_score', 0):.1f}/100\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
        if script.get('format') == 'text':
            content = script.get('content', '')
            if len(content) > 600:
                text += f"{content[:600]}...\n\n"
            else:
                text += f"{content}\n\n"
        else:
            description = script.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
            if len(description) > 400:
                text += f"{description[:400]}...\n\n"
            else:
                text += f"{description}\n\n"
        
        text += "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?"
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="continue_with_script")],
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏", callback_data="regenerate_scripts")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.app.bot.send_message(
            chat_id=self.admin_chat_id,
            text=text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    async def _send_image_result(self, image_path: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        try:
            script = self.manager.winner_script
            
            caption = f"üñºÔ∏è *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–∏–∫—Å–∞ –≥–æ—Ç–æ–≤–æ!*\n\n"
            caption += f"*{script.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}*\n"
            caption += f"–ê–≤—Ç–æ—Ä: {script.get('writer_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
            caption += f"–û—Ü–µ–Ω–∫–∞: {self.manager.winner_score:.1f}/100\n\n"
            caption += "–û–¥–æ–±—Ä–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è?"
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", callback_data="approve_publication")],
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="regenerate_image")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            with open(image_path, 'rb') as photo:
                await self.app.bot.send_photo(
                    chat_id=self.admin_chat_id,
                    photo=photo,
                    caption=caption,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
        except Exception as e:
            await self._send_error_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
    
    async def _regenerate_news(self, query):
        """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏ —Å –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
        try:
            await query.edit_message_text("üîÑ –ü–æ–ª—É—á–∞—é –Ω–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å...")
        except:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –ø—Ä–æ–±—É–µ–º caption
            try:
                await query.edit_message_caption("üîÑ –ü–æ–ª—É—á–∞—é –Ω–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å...")
            except:
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self._send_status_message("üîÑ –ü–æ–ª—É—á–∞—é –Ω–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å...")
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –Ω–æ–≤–æ—Å—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö
            current_news = self.manager.news if hasattr(self.manager, 'news') else None
            if current_news and current_news not in self.rejected_news_list:
                self.rejected_news_list.append(current_news)
                telegram_logger.info(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö: {current_news.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
                telegram_logger.info(f"üìã –í—Å–µ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {len(self.rejected_news_list)}")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å, –∏—Å–∫–ª—é—á–∞—è –í–°–ï –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ
            news = self.manager.collect_news(force_new_news=True, exclude_news_list=self.rejected_news_list)
            if not news:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
                await self._send_error_message(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å (–∏—Å–∫–ª—é—á–µ–Ω–æ {len(self.rejected_news_list)} —Ç–µ–º).\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º—ã —Å Perplexity API –∏–ª–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π –¥–Ω—è.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç—å—é."
                )
                return
            
            telegram_logger.info(f"üì∞ –ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∞: {news.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
            telegram_logger.info(f"üö´ –ò—Å–∫–ª—é—á–µ–Ω–æ —Ç–µ–º: {len(self.rejected_news_list)}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è
            await self._send_news_for_approval(news)
            
        except Exception as e:
            error_msg = str(e)
            if "500" in error_msg or "internal_server_error" in error_msg:
                await self._send_error_message(
                    "‚ùå Perplexity API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—à–∏–±–∫–∞ 500).\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Å —Ç–µ–∫—É—â–µ–π."
                )
            else:
                await self._send_error_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏: {error_msg}")
    
    async def _regenerate_scripts(self, query):
        """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤."""
        try:
            await query.edit_message_caption("üîÑ –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—é –ø–æ—Å—Ç...")
        except:
            # –ï—Å–ª–∏ –Ω–µ—Ç caption, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            await query.edit_message_text("üîÑ –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—é –ø–æ—Å—Ç...")
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –Ω–æ–≤–æ—Å—Ç—å
            current_news = self.manager.news
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            scripts = self.manager.generate_scripts()
            if not scripts:
                await self._send_error_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏")
                return
            
            # –û—Ü–µ–Ω–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            evaluations = self.manager.evaluate_scripts()
            if not evaluations:
                await self._send_error_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å –Ω–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏")
                return
            
            # –í—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            winner = self.manager.select_winner()
            if not winner:
                await self._send_error_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π")
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–æ–ø-4 —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            top_scripts = self.manager.select_top_scripts(4)
            if not top_scripts:
                await self._send_error_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ø —Å—Ü–µ–Ω–∞—Ä–∏–∏")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–æ–ø —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            image_results = self.manager.create_images_for_top_scripts(top_scripts)
            if not image_results or not any(r["success"] for r in image_results):
                await self._send_error_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞
            await self._send_multiple_images_result(image_results)
            
        except Exception as e:
            await self._send_error_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {str(e)}")
    
    async def _regenerate_image(self, query):
        """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        await query.edit_message_caption("üîÑ –°–æ–∑–¥–∞—é –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            current_news = self.manager.news
            current_winner = {
                "script": self.manager.winner_script,
                "average_score": self.manager.winner_score
            }
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_path = self.manager.create_image()
            if not image_path:
                await self._send_error_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
            await self._send_final_post_for_approval(current_news, current_winner, image_path)
            
        except Exception as e:
            await self._send_error_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
    
    async def _approve_publication(self, query):
        """–û–¥–æ–±—Ä–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."""
        await query.edit_message_caption("üì§ –ü—É–±–ª–∏–∫—É—è –∫–æ–º–∏–∫—Å –≤ –∫–∞–Ω–∞–ª...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not hasattr(self.manager, 'image_path') or not self.manager.image_path:
                await self._send_error_message("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
                
            if not hasattr(self.manager, 'winner_script') or not self.manager.winner_script:
                await self._send_error_message("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            if not hasattr(self.manager, 'news') or not self.manager.news:
                await self._send_error_message("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª —Å –ø—Ä–æ–º–ø—Ç–æ–º
            publication_result = publish_comic_to_channel(
                image_path=self.manager.image_path,
                script=self.manager.winner_script,
                news_title=self.manager.news.get('title', '–ù–æ–≤–æ—Å—Ç—å –¥–Ω—è'),
                average_score=self.manager.winner_score
            )
            
            if publication_result.get('success'):
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
                self.manager.publication_results = publication_result
                self.manager.save_history()
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                success_text = "‚úÖ *–ö–æ–º–∏–∫—Å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!*\n\n"
                success_text += f"üì∫ –ö–∞–Ω–∞–ª: {publication_result.get('channel_id', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                success_text += f"üìù –ü–æ—Å—Ç ID: {publication_result.get('post_message_id', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                success_text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ID: {publication_result.get('comment_message_id', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                success_text += f"üìÖ –í—Ä–µ–º—è: {publication_result.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
                success_text += "–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."
                
                await self._send_status_message(success_text)
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                important_logger.log_publication_success(
                    channel_id=publication_result.get('channel_id'),
                    post_id=publication_result.get('post_message_id'),
                    script_title=self.manager.winner_script.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'),
                    average_score=self.manager.winner_score
                )
                
            else:
                error_msg = publication_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                await self._send_error_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {error_msg}")
            
        except Exception as e:
            await self._send_error_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
    
    async def _run_full_automatic_process(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ –≥–æ—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞."""
        try:
            telegram_logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —á–µ—Ä–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")
            
            # –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (–í–°–ï–ì–î–ê –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂—É—é –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)
            await self._send_status_message("üì∞ –ü–æ–ª—É—á–∞—é —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–Ω—è...")
            news = self.manager.collect_news(force_new_news=True)
            
            if not news:
                await self._send_error_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –¥–Ω—è")
                return
            
            telegram_logger.info(f"üì∞ –°–≤–µ–∂–∞—è –Ω–æ–≤–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∞: {news.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            await self._send_news_for_approval(news)
            
        except Exception as e:
            telegram_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {str(e)}")
            import traceback
            telegram_logger.error(f"Traceback: {traceback.format_exc()}")
            await self._send_error_message(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {str(e)}")
    
    async def _send_final_post_for_approval(self, news: Dict[str, Any], winner: Dict[str, Any], image_path: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ."""
        try:
            script = winner['script']
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –∫–∞–∫ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –ø–æ—Å—Ç–µ
            caption = f"*{script.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}*\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
            if script.get('format') == 'text':
                content = script.get('content', '')
                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
                if len(content) > 500:
                    caption += f"{content[:500]}...\n\n"
                else:
                    caption += f"{content}\n\n"
            else:
                caption += f"{script.get('caption', '')}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            caption += f"üì∞ –ù–æ–≤–æ—Å—Ç—å: {news.get('title', '')}\n"
            caption += f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {script.get('writer_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
            caption += f"üèÜ –û—Ü–µ–Ω–∫–∞ –∂—é—Ä–∏: {winner.get('average_score', 0):.1f}/100\n\n"
            caption += "–û–¥–æ–±—Ä–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é?"
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", callback_data="approve_publication")],
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å", callback_data="regenerate_news")],
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏", callback_data="regenerate_scripts")],
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="regenerate_image")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            with open(image_path, 'rb') as photo:
                await self.app.bot.send_photo(
                    chat_id=self.admin_chat_id,
                    photo=photo,
                    caption=caption,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                
        except Exception as e:
            await self._send_error_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {str(e)}")
    
    async def _manual_start(self, query):
        """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        await query.edit_message_text("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ—Å—Å –≤—Ä—É—á–Ω—É—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        await self._run_full_automatic_process()
    
    async def _show_status(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ callback."""
        status_text = "üìä *–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:*\n\n"
        
        if hasattr(self.manager, 'news') and self.manager.news:
            status_text += "‚úÖ –ù–æ–≤–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∞\n"
        else:
            status_text += "‚≠ï –ù–æ–≤–æ—Å—Ç—å –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞\n"
            
        if hasattr(self.manager, 'scripts') and self.manager.scripts:
            status_text += f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã ({len(self.manager.scripts)} —à—Ç.)\n"
        else:
            status_text += "‚≠ï –°—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã\n"
            
        if hasattr(self.manager, 'winner_script') and self.manager.winner_script:
            status_text += "‚úÖ –õ—É—á—à–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤—ã–±—Ä–∞–Ω\n"
        else:
            status_text += "‚≠ï –õ—É—á—à–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –≤—ã–±—Ä–∞–Ω\n"
            
        if hasattr(self.manager, 'image_path') and self.manager.image_path:
            status_text += "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ\n"
        else:
            status_text += "‚≠ï –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ\n"
            
        if hasattr(self.manager, 'publication_results') and self.manager.publication_results:
            status_text += "‚úÖ –ö–æ–º–∏–∫—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω\n"
        else:
            status_text += "‚≠ï –ö–æ–º–∏–∫—Å –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω\n"
        
        await query.edit_message_text(status_text, parse_mode='Markdown')
    
    async def _test_publish(self, query):
        """–¢–µ—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º."""
        await query.edit_message_text("üß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è
            from test_publish_now import create_test_image, create_test_script
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await self._send_status_message("üñºÔ∏è –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            test_image_path = create_test_image()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            test_script = create_test_script()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            caption = f"üß™ *–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!*\n\n"
            caption += f"*{test_script.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}*\n"
            caption += f"–ê–≤—Ç–æ—Ä: {test_script.get('writer_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
            caption += f"–û—Ü–µ–Ω–∫–∞: 95.5/100 (—Ç–µ—Å—Ç–æ–≤–∞—è)\n\n"
            caption += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª:"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ manager –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            self.manager.image_path = test_image_path
            self.manager.winner_script = test_script
            self.manager.winner_score = 95.5
            self.manager.news = {
                "title": "–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
                "content": "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram –∫–∞–Ω–∞–ª"
            }
            
            keyboard = [
                [InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="approve_publication")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            with open(test_image_path, 'rb') as photo:
                await self.app.bot.send_photo(
                    chat_id=self.admin_chat_id,
                    photo=photo,
                    caption=caption,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                
        except Exception as e:
            await self._send_error_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
    
    async def _show_schedule_settings(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
        settings_text = "‚è∞ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:*\n\n"
        settings_text += "ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º:**\n"
        settings_text += f"‚Ä¢ {NEWS_COLLECTION_HOUR:02d}:{NEWS_COLLECTION_MINUTE:02d} - –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ\n"
        settings_text += f"‚Ä¢ {PUBLICATION_TIME_HOUR:02d}:{PUBLICATION_TIME_MINUTE:02d} - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è (–ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è)\n\n"
        settings_text += "üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:**\n"
        settings_text += "‚Ä¢ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
        settings_text += "‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: CET\n\n"
        settings_text += "üîß **–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫** –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            settings_text, 
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    async def _back_to_menu(self, query):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
        keyboard = [
            [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤—Ä—É—á–Ω—É—é", callback_data="manual_start")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="show_status")],
            [InlineKeyboardButton("‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data="schedule_settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üé≠ *DailyComicBot Control Panel*\n\n"
            f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º: –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {NEWS_COLLECTION_HOUR:02d}:{NEWS_COLLECTION_MINUTE:02d} —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–æ—Å—Ç, –≤ {PUBLICATION_TIME_HOUR:02d}:{PUBLICATION_TIME_MINUTE:02d} –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è\n"
            "üîß –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º: –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ª–∞–¥–∫–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    async def _restart_full_process(self, query):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞."""
        await query.edit_message_text("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å...")
        await self._run_full_automatic_process()
    
    async def _send_status_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        await self.app.bot.send_message(
            chat_id=self.admin_chat_id,
            text=message,
            parse_mode='Markdown'
        )
    
    async def _send_multiple_images_result(self, image_results: List[Dict[str, Any]]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ manager –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self.manager.image_results = image_results
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            info_text = f"üñºÔ∏è *–°–æ–∑–¥–∞–Ω–æ {len([r for r in image_results if r['success']])} –∏–∑ {len(image_results)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π*\n\n"
            info_text += "–í—ã–±–µ—Ä–∏—Ç–µ –ª—É—á—à–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:"
            
            await self.app.bot.send_message(
                chat_id=self.admin_chat_id,
                text=info_text,
                parse_mode='Markdown'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ü–µ–Ω–∞—Ä–∏–∏
            for result in image_results:
                if result["success"] and result["image_path"]:
                    script_info = result["script_info"]
                    script = script_info["script"]
                    
                    caption = f"üèÜ *–¢–æ–ø-{script_info['rank']} —Å—Ü–µ–Ω–∞—Ä–∏–π*\n\n"
                    caption += f"*{script.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}*\n"
                    caption += f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {script.get('writer_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
                    caption += f"üèÜ –û—Ü–µ–Ω–∫–∞ –∂—é—Ä–∏: {script_info['average_score']:.1f}/100\n\n"
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
                    if script.get('format') == 'text':
                        content = script.get('content', '')
                        if len(content) > 300:
                            caption += f"{content[:300]}...\n\n"
                        else:
                            caption += f"{content}\n\n"
                    else:
                        description = script.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
                        if len(description) > 200:
                            caption += f"{description[:200]}...\n\n"
                        else:
                            caption += f"{description}\n\n"
                    
                    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    keyboard = [
                        [InlineKeyboardButton(f"‚úÖ –í—ã–±—Ä–∞—Ç—å —Ç–æ–ø-{script_info['rank']}", callback_data=f"select_image_{script_info['rank']}")],
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    with open(result["image_path"], 'rb') as photo:
                        await self.app.bot.send_photo(
                            chat_id=self.admin_chat_id,
                            photo=photo,
                            caption=caption,
                            parse_mode='Markdown',
                            reply_markup=reply_markup
                        )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            general_keyboard = [
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="regenerate_all_images")],
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏", callback_data="regenerate_scripts")],
                [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart_full")]
            ]
            general_reply_markup = InlineKeyboardMarkup(general_keyboard)
            
            await self.app.bot.send_message(
                chat_id=self.admin_chat_id,
                text="üéØ *–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:*",
                parse_mode='Markdown',
                reply_markup=general_reply_markup
            )
            
        except Exception as e:
            await self._send_error_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}")

    async def _select_image_by_rank(self, query, rank: int):
        """–í—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ä–∞–Ω–≥—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."""
        try:
            await query.edit_message_caption(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ø-{rank} —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Å—Ü–µ–Ω–∞—Ä–∏–∏
            top_scripts = self.manager.select_top_scripts(4)
            if not top_scripts or rank > len(top_scripts):
                await self._send_error_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π")
                return
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            selected_script_info = None
            for script_info in top_scripts:
                if script_info["rank"] == rank:
                    selected_script_info = script_info
                    break
            
            if not selected_script_info:
                await self._send_error_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π")
                return
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∫–∞–∫ winner
            self.manager.winner_script = selected_script_info["script"]
            self.manager.winner_score = selected_script_info["average_score"]
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ manager
            selected_image_path = None
            if hasattr(self.manager, 'image_results') and self.manager.image_results:
                for result in self.manager.image_results:
                    if result["script_info"]["rank"] == rank and result["success"]:
                        selected_image_path = result["image_path"]
                        break
            
            if not selected_image_path:
                await self._send_error_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è")
                return
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ
            self.manager.image_path = selected_image_path
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            self.manager.approved_image = {
                "image_path": selected_image_path,
                "script": self.manager.winner_script,
                "average_score": self.manager.winner_score
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ
            await self._send_final_post_for_approval(
                self.manager.news,
                {
                    "script": self.manager.winner_script,
                    "average_score": self.manager.winner_score
                },
                selected_image_path
            )
            
        except Exception as e:
            await self._send_error_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

    async def _regenerate_all_images(self, query):
        """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–æ–ø-4 —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤."""
        try:
            await query.edit_message_text("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—é –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Å—Ü–µ–Ω–∞—Ä–∏–∏
            top_scripts = self.manager.select_top_scripts(4)
            if not top_scripts:
                await self._send_error_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Å—Ü–µ–Ω–∞—Ä–∏–∏")
                return
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_results = self.manager.create_images_for_top_scripts(top_scripts)
            if image_results:
                await self._send_multiple_images_result(image_results)
            else:
                await self._send_error_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                
        except Exception as e:
            await self._send_error_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}")

    async def _send_error_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ."""
        keyboard = [
            [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart_full")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.app.bot.send_message(
            chat_id=self.admin_chat_id,
            text=message,
            reply_markup=reply_markup
        )
    
    async def notify_images_ready(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        try:
            if hasattr(self.manager, 'image_results') and self.manager.image_results:
                await self._send_multiple_images_result(self.manager.image_results)
            else:
                await self._send_status_message("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        except Exception as e:
            telegram_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
    
    # ===== –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ê–ù–ï–ö–î–û–¢–û–í (–ù–ï –ò–ó–ú–ï–ù–Ø–Æ–¢ –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ) =====
    
    async def _create_joke(self, query):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–µ–∫–¥–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–Ω—è."""
        try:
            await query.edit_message_text("üé≠ –°–æ–∑–¥–∞—é –∞–Ω–µ–∫–¥–æ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–Ω—è...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–æ–≤–æ—Å—Ç—å
            if not hasattr(self.manager, 'news') or not self.manager.news:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                await self._send_status_message("üì∞ –ü–æ–ª—É—á–∞—é –Ω–æ–≤–æ—Å—Ç—å –¥–Ω—è –¥–ª—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤...")
                news = self.manager.collect_news(force_new_news=False)
                if not news:
                    await self._send_error_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤")
                    return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤
            await self._send_status_message("üé≠ –°–æ–∑–¥–∞—é –∞–Ω–µ–∫–¥–æ—Ç—ã –æ—Ç –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–æ–≤...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º manager –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤
            results = self.manager.run_joke_process()
            
            if not results.get("success"):
                await self._send_error_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç—ã")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–µ–∫–¥–æ—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
            if hasattr(self.manager, 'jokes') and self.manager.jokes:
                await self._send_jokes_for_selection(self.manager.jokes)
            else:
                await self._send_error_message("‚ùå –ê–Ω–µ–∫–¥–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            await self._send_error_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤: {str(e)}")
    
    async def _regenerate_jokes(self, query):
        """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤."""
        try:
            await query.edit_message_text("üîÑ –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–µ –∞–Ω–µ–∫–¥–æ—Ç—ã...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            if hasattr(self.manager, 'news') and self.manager.news:
                results = self.manager.run_joke_process(news=self.manager.news)
                
                if results.get("success") and hasattr(self.manager, 'jokes') and self.manager.jokes:
                    await self._send_jokes_for_selection(self.manager.jokes)
                else:
                    await self._send_error_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç—ã")
            else:
                await self._send_error_message("‚ùå –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤")
                
        except Exception as e:
            await self._send_error_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤: {str(e)}")
    
    async def _send_jokes_for_selection(self, jokes: List[Dict[str, Any]]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞."""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            info_text = f"üé≠ *–°–æ–∑–¥–∞–Ω–æ {len(jokes)} –∞–Ω–µ–∫–¥–æ—Ç–æ–≤*\n\n"
            info_text += f"üì∞ –ù–æ–≤–æ—Å—Ç—å: {self.manager.news.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}\n\n"
            info_text += "–í—ã–±–µ—Ä–∏—Ç–µ –ª—É—á—à–∏–π –∞–Ω–µ–∫–¥–æ—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:"
            
            await self.app.bot.send_message(
                chat_id=self.admin_chat_id,
                text=info_text,
                parse_mode='Markdown'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∞–Ω–µ–∫–¥–æ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
            for joke in jokes:
                author_name = joke.get('writer_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')
                author_type = joke.get('writer_type', 'Unknown')
                joke_title = joke.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
                joke_content = joke.get('content', '–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è')
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–µ–∫–¥–æ—Ç–∞
                joke_text = f"üé≠ *–ê–Ω–µ–∫–¥–æ—Ç –æ—Ç {author_name}*\n\n"
                joke_text += f"*{joke_title}*\n\n"
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
                if len(joke_content) > 800:
                    joke_text += f"{joke_content[:800]}...\n\n"
                else:
                    joke_text += f"{joke_content}\n\n"
                
                joke_text += f"–ê–≤—Ç–æ—Ä: {author_name}"
                
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç—Ç–æ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç–∞
                keyboard = [
                    [InlineKeyboardButton(f"‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –∞–Ω–µ–∫–¥–æ—Ç", callback_data=f"select_joke_{author_type}")],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await self.app.bot.send_message(
                    chat_id=self.admin_chat_id,
                    text=joke_text,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            general_keyboard = [
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç—ã", callback_data="regenerate_jokes")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            general_reply_markup = InlineKeyboardMarkup(general_keyboard)
            
            await self.app.bot.send_message(
                chat_id=self.admin_chat_id,
                text="üéØ *–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:*",
                parse_mode='Markdown',
                reply_markup=general_reply_markup
            )
            
        except Exception as e:
            await self._send_error_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤: {str(e)}")
    
    async def _select_joke(self, query, author_type: str):
        """–í—ã–±–æ—Ä –∞–Ω–µ–∫–¥–æ—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞."""
        try:
            await query.edit_message_text(f"‚úÖ –í—ã–±—Ä–∞–Ω –∞–Ω–µ–∫–¥–æ—Ç –æ—Ç {SCRIPTWRITERS.get(author_type, {}).get('name', author_type)}!")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–µ–∫–¥–æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞
            selected_joke = self.manager.get_joke_by_author(author_type)
            if not selected_joke:
                await self._send_error_message(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç –∞–≤—Ç–æ—Ä–∞ {author_type}")
                return
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç
            self.manager.selected_joke = selected_joke
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è
            await self._send_joke_for_approval(selected_joke)
            
        except Exception as e:
            await self._send_error_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–Ω–µ–∫–¥–æ—Ç–∞: {str(e)}")
    
    async def _send_joke_for_approval(self, joke: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç–∞ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è."""
        try:
            author_name = joke.get('writer_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')
            joke_title = joke.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
            joke_content = joke.get('content', '–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            final_text = f"üé≠ *–í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!*\n\n"
            final_text += f"üì∞ –ù–æ–≤–æ—Å—Ç—å: {self.manager.news.get('title', '')}\n\n"
            final_text += f"*{joke_title}*\n\n"
            final_text += f"{joke_content}\n\n"
            final_text += f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {author_name}\n\n"
            final_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            
            keyboard = [
                [InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="publish_joke_now")],
                [InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", callback_data="schedule_joke")],
                [InlineKeyboardButton("üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–Ω–µ–∫–¥–æ—Ç", callback_data="regenerate_jokes")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await self.app.bot.send_message(
                chat_id=self.admin_chat_id,
                text=final_text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
        except Exception as e:
            await self._send_error_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–µ–∫–¥–æ—Ç–∞ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è: {str(e)}")
    
    async def _publish_joke_now(self, query):
        """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç–∞."""
        try:
            await query.edit_message_text("üì§ –ü—É–±–ª–∏–∫—É—é –∞–Ω–µ–∫–¥–æ—Ç –≤ –∫–∞–Ω–∞–ª...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç–∞
            if not hasattr(self.manager, 'selected_joke') or not self.manager.selected_joke:
                await self._send_error_message("‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                return
            
            # –ü—É–±–ª–∏–∫—É–µ–º –∞–Ω–µ–∫–¥–æ—Ç —á–µ—Ä–µ–∑ manager
            publication_result = self.manager.publish_joke()
            
            if publication_result and publication_result.get("success"):
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                success_text = "‚úÖ *–ê–Ω–µ–∫–¥–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!*\n\n"
                success_text += f"üì∫ –ö–∞–Ω–∞–ª: {publication_result.get('platforms', {}).get('telegram', {}).get('channel_id', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                success_text += f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ ID: {publication_result.get('platforms', {}).get('telegram', {}).get('message_id', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                success_text += f"üìÖ –í—Ä–µ–º—è: {publication_result.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
                success_text += f"üé≠ –ê–Ω–µ–∫–¥–æ—Ç: {publication_result.get('joke_title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}\n"
                success_text += f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {publication_result.get('author_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}"
                
                await self._send_status_message(success_text)
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞
                telegram_logger.info(f"‚úÖ –ê–Ω–µ–∫–¥–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {publication_result.get('joke_title')}")
                
            else:
                error_msg = publication_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if publication_result else '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'
                await self._send_error_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞: {error_msg}")
            
        except Exception as e:
            await self._send_error_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞: {str(e)}")
    
    async def _schedule_joke(self, query):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞."""
        try:
            await query.edit_message_text("‚è∞ –ü–ª–∞–Ω–∏—Ä—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∞–Ω–µ–∫–¥–æ—Ç–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç–∞
            if not hasattr(self.manager, 'selected_joke') or not self.manager.selected_joke:
                await self._send_error_message("‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 14:00)
            joke_hour = int(os.getenv("JOKE_PUBLICATION_HOUR", "14"))
            joke_minute = int(os.getenv("JOKE_PUBLICATION_MINUTE", "0"))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–µ–∫–¥–æ—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            self.manager.scheduled_joke = {
                "joke": self.manager.selected_joke,
                "news_title": self.manager.news.get('title', ''),
                "scheduled_time": f"{joke_hour:02d}:{joke_minute:02d}",
                "approved": True
            }
            
            success_text = f"‚è∞ *–ê–Ω–µ–∫–¥–æ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!*\n\n"
            success_text += f"üé≠ –ê–Ω–µ–∫–¥–æ—Ç: {self.manager.selected_joke.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}\n"
            success_text += f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {self.manager.selected_joke.get('writer_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
            success_text += f"üìÖ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {joke_hour:02d}:{joke_minute:02d}\n\n"
            success_text += "–ê–Ω–µ–∫–¥–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
            
            keyboard = [
                [InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="publish_joke_now")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await self.app.bot.send_message(
                chat_id=self.admin_chat_id,
                text=success_text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            telegram_logger.info(f"‚è∞ –ê–Ω–µ–∫–¥–æ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω: {self.manager.selected_joke.get('title')} –Ω–∞ {joke_hour:02d}:{joke_minute:02d}")
            
        except Exception as e:
            await self._send_error_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞: {str(e)}")
    
    async def _approve_joke_publication(self, query):
        """–û–¥–æ–±—Ä–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)."""
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        await self._publish_joke_now(query)
    
    def _is_admin(self, update: Update) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
        return str(update.effective_user.id) == str(self.admin_chat_id)
    
    def _is_admin_callback(self, query) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–¥–ª—è callback)."""
        return str(query.from_user.id) == str(self.admin_chat_id)
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥."""
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("status", self.status_command))
        self.app.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.app.add_error_handler(self.error_handler)
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Telegram –±–æ—Ç–∞."""
        error = context.error
        
        if "Conflict" in str(error) and "getUpdates" in str(error):
            telegram_logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç: –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            telegram_logger.warning("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤–æ–≥–æ")
        else:
            telegram_logger.error(f"–û—à–∏–±–∫–∞ –≤ Telegram –±–æ—Ç–µ: {error}")
            
        # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ update –º–æ–∂–µ—Ç –±—ã—Ç—å None
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        if not TELEGRAM_BOT_TOKEN:
            telegram_logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
            
        if not self.admin_chat_id:
            telegram_logger.error("TELEGRAM_ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.setup_handlers()
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        telegram_logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        await self.app.run_polling()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    bot = ComicBotTelegram()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏ chat_id –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    if not TELEGRAM_BOT_TOKEN:
        telegram_logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return
        
    if not TELEGRAM_ADMIN_CHAT_ID:
        telegram_logger.error("TELEGRAM_ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    telegram_logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞: {TELEGRAM_ADMIN_CHAT_ID}")
    
    # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫
    try:
        asyncio.run(bot.run())
    except KeyboardInterrupt:
        telegram_logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        telegram_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    main()
