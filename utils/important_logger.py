"""
–ú–æ–¥—É–ª—å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ DailyComicBot.
–°–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥-—Ñ–∞–π–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º.
"""

import logging
import sys
import os
import re
from datetime import datetime
from pathlib import Path
from logging.handlers import RotatingFileHandler
import threading
from queue import Queue

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
sys.path.append(str(Path(__file__).resolve().parent.parent))
from config import LOGS_DIR

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
IMPORTANT_LOG_FILE = LOGS_DIR / "important_events.log"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(LOGS_DIR, exist_ok=True)

# –û—á–µ—Ä–µ–¥—å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
important_log_queue = Queue()


class AsyncImportantHandler(logging.Handler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
    """
    
    def __init__(self, handler):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
        
        Args:
            handler: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
        """
        super().__init__()
        self.handler = handler
        self.queue = important_log_queue
        self.thread = threading.Thread(target=self._process_queue, daemon=True)
        self.thread.start()
    
    def emit(self, record):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥—å.
        
        Args:
            record: –ó–∞–ø–∏—Å—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
        """
        self.queue.put(record)
    
    def _process_queue(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        while True:
            try:
                record = self.queue.get()
                self.handler.emit(record)
                self.queue.task_done()
            except Exception:
                import traceback
                print(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {traceback.format_exc()}")


class ImportantFormatter(logging.Formatter):
    """
    –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞."""
        super().__init__('%(asctime)s - %(message)s', datefmt='%Y-%m-%d %H:%M:%S')


# –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
important_logger = logging.getLogger('important_events')
important_logger.setLevel(logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
important_handler = RotatingFileHandler(
    IMPORTANT_LOG_FILE, maxBytes=10*1024*1024, backupCount=5, encoding='utf-8'
)
important_formatter = ImportantFormatter()
important_handler.setFormatter(important_formatter)

# –°–æ–∑–¥–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
async_important_handler = AsyncImportantHandler(important_handler)
important_logger.addHandler(async_important_handler)

# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º –ª–æ–≥–≥–µ—Ä–∞–º
important_logger.propagate = False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–µ–∑–∞–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
def truncate_text(text, max_length=100):
    """
    –û–±—Ä–µ–∑–∞–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã.
    
    Args:
        text (str): –¢–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–µ–∑–∞–Ω–∏—è.
        max_length (int, optional): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 100.
        
    Returns:
        str: –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
    """
    if len(text) > max_length:
        return text[:max_length-3] + "..."
    return text


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
def log_perplexity_request():
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ Perplexity –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å –¥–Ω—è."""
    important_logger.info("–£—à–µ–ª –∑–∞–ø—Ä–æ—Å –≤ –ø–µ—Ä–ø–ª–µ–∫—Å–∏—Ç–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å –¥–Ω—è")


def log_perplexity_response(news):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Perplexity —Å –Ω–æ–≤–æ—Å—Ç—å—é.
    
    Args:
        news (dict): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤–æ—Å—Ç–∏.
    """
    title = news.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
    content = news.get('content', '–ë–µ–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è')
    
    # –ù–µ –æ–±—Ä–µ–∑–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
    important_logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ø–µ—Ä–ø–ª–µ–∫—Å–∏—Ç–∏ —Å –Ω–æ–≤–æ—Å—Ç—å—é: {title}")
    important_logger.info(f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏: {content}")


def log_scriptwriter_request(writer_type, writer_name):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —à—É—Ç–∫—É –∫ –∞–≤—Ç–æ—Ä—É.
    
    Args:
        writer_type (str): –¢–∏–ø —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç–∞ (A, B, C, D, E).
        writer_name (str): –ò–º—è —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç–∞.
    """
    important_logger.info(f"–£—à–µ–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —à—É—Ç–∫—É –∫ –∞–≤—Ç–æ—Ä—É {writer_name} (—Ç–∏–ø {writer_type})")


def log_scriptwriter_response(writer_type, writer_name, script):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–≤—Ç–æ—Ä–∞.
    
    Args:
        writer_type (str): –¢–∏–ø —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç–∞ (A, B, C, D, E).
        writer_name (str): –ò–º—è —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç–∞.
        script (dict): –°—Ü–µ–Ω–∞—Ä–∏–π –∫–æ–º–∏–∫—Å–∞.
    """
    title = script.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
    script_id = script.get('script_id', '–ë–µ–∑ ID')
    
    # –ù–µ –æ–±—Ä–µ–∑–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    important_logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –∞–≤—Ç–æ—Ä–∞ {writer_name} (—Ç–∏–ø {writer_type}): {title} (ID: {script_id})")


def log_jury_request(jury_type, jury_name, script_id, writer_name):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ –∂—é—Ä–∏ –Ω–∞ –æ—Ü–µ–Ω–∫—É —à—É—Ç–∫–∏ –æ—Ç –∞–≤—Ç–æ—Ä–∞.
    
    Args:
        jury_type (str): –¢–∏–ø –∂—é—Ä–∏ (A, B, C, D, E).
        jury_name (str): –ò–º—è —á–ª–µ–Ω–∞ –∂—é—Ä–∏.
        script_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è.
        writer_name (str): –ò–º—è –∞–≤—Ç–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è.
    """
    important_logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –≤ –∂—é—Ä–∏ {jury_name} (—Ç–∏–ø {jury_type}) –Ω–∞ –æ—Ü–µ–Ω–∫—É —à—É—Ç–∫–∏ –æ—Ç –∞–≤—Ç–æ—Ä–∞ {writer_name} (ID: {script_id})")


def log_jury_response(jury_type, jury_name, script_id, writer_name, score):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ –æ—Ç —á–ª–µ–Ω–∞ –∂—é—Ä–∏.
    
    Args:
        jury_type (str): –¢–∏–ø –∂—é—Ä–∏ (A, B, C, D, E).
        jury_name (str): –ò–º—è —á–ª–µ–Ω–∞ –∂—é—Ä–∏.
        script_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è.
        writer_name (str): –ò–º—è –∞–≤—Ç–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è.
        score (float): –û—Ü–µ–Ω–∫–∞.
    """
    important_logger.info(f"–û—Ü–µ–Ω–∫–∞ —á–ª–µ–Ω–∞ –∂—é—Ä–∏ {jury_name} (—Ç–∏–ø {jury_type}) –¥–ª—è –∞–≤—Ç–æ—Ä–∞ {writer_name} (ID: {script_id}): {score}/100")


def log_winner_selection(script_id, writer_name, title, score):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.
    
    Args:
        script_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è-–ø–æ–±–µ–¥–∏—Ç–µ–ª—è.
        writer_name (str): –ò–º—è –∞–≤—Ç–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è-–ø–æ–±–µ–¥–∏—Ç–µ–ª—è.
        title (str): –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è-–ø–æ–±–µ–¥–∏—Ç–µ–ª—è.
        score (float): –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞.
    """
    # –ù–µ –æ–±—Ä–µ–∑–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    important_logger.info(f"–í—ã–±—Ä–∞–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: —Å—Ü–µ–Ω–∞—Ä–∏–π '{title}' (ID: {script_id}) –æ—Ç –∞–≤—Ç–æ—Ä–∞ {writer_name} —Å –æ—Ü–µ–Ω–∫–æ–π {score:.2f}/100")


def log_image_creation(script_id, writer_name, image_path):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    
    Args:
        script_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è.
        writer_name (str): –ò–º—è –∞–≤—Ç–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è.
        image_path (str): –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.
    """
    important_logger.info(f"–°–æ–∑–¥–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è –æ—Ç –∞–≤—Ç–æ—Ä–∞ {writer_name} (ID: {script_id}): {image_path}")


def log_publication(platforms, image_path):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
    
    Args:
        platforms (list): –°–ø–∏—Å–æ–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∫–æ–º–∏–∫—Å.
        image_path (str): –ü—É—Ç—å –∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.
    """
    important_logger.info(f"–ö–æ–º–∏–∫—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö: {', '.join(platforms)}. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")


def log_scheduled_task_start(task_name):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏.
    
    Args:
        task_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.
    """
    important_logger.info(f"üïê –ó–∞–ø—É—Å–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏: {task_name}")


def log_scheduled_task_complete(task_name):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏.
    
    Args:
        task_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.
    """
    important_logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞: {task_name}")


def log_error(context, error_message):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏.
    
    Args:
        context (str): –ö–æ–Ω—Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.
        error_message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    important_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {context}: {error_message}")


def log_publication_success(channel_id, post_id, script_title, average_score):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª.
    
    Args:
        channel_id (str): ID –∫–∞–Ω–∞–ª–∞.
        post_id (str): ID –ø–æ—Å—Ç–∞.
        script_title (str): –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è.
        average_score (float): –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞.
    """
    important_logger.info(f"üì§ –£—Å–ø–µ—à–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª {channel_id}, –ø–æ—Å—Ç {post_id}: '{script_title}' (–æ—Ü–µ–Ω–∫–∞: {average_score:.1f}/100)")
