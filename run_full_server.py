"""
–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä DailyComicBot —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –∏ Telegram –±–æ—Ç–æ–º.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
"""

import os
import sys
import asyncio
import signal
import threading
import time
from pathlib import Path
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).resolve().parent))
from agents.manager import get_manager
from utils import logger, important_logger
from utils.scheduler import scheduler, start_scheduler, shutdown_scheduler
from telegram_bot import ComicBotTelegram
from tools.publishing_tools import publish_comic_to_channel

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
TIMEZONE = os.getenv("TIMEZONE", "Europe/Nicosia")
NEWS_COLLECTION_HOUR = int(os.getenv("NEWS_COLLECTION_HOUR", "13"))
NEWS_COLLECTION_MINUTE = int(os.getenv("NEWS_COLLECTION_MINUTE", "0"))
PUBLICATION_TIME_HOUR = int(os.getenv("PUBLICATION_TIME_HOUR", "13"))
PUBLICATION_TIME_MINUTE = int(os.getenv("PUBLICATION_TIME_MINUTE", "15"))

class DailyComicBotServer:
    """–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä DailyComicBot —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –∏ Telegram –±–æ—Ç–æ–º."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞."""
        self.manager = get_manager()
        self.telegram_bot = None
        self.running = False
        self.bot_event_loop = None
        
    def scheduled_news_collection(self):
        """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π - –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ—Ç –∂–µ –ø—Ä–æ—Ü–µ—Å—Å, —á—Ç–æ –∏ —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –≤ –±–æ—Ç–µ."""
        try:
            logger.info("üïê –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞—á–∞—Ç")
            important_logger.log_scheduled_task_start("news_collection")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –±–æ—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
            if self.telegram_bot and self.telegram_bot.app:
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π event loop
                    if hasattr(self, 'bot_event_loop') and self.bot_event_loop:
                        loop = self.bot_event_loop
                        logger.info("üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π event loop –±–æ—Ç–∞")
                    else:
                        logger.error("‚ùå Event loop –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        self._run_direct_process()
                        return
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É –≤ event loop –±–æ—Ç–∞
                    future = asyncio.run_coroutine_threadsafe(
                        self.telegram_bot._run_full_automatic_process(),
                        loop
                    )
                    
                    logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ Telegram –±–æ—Ç")
                    
                    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∑–∞–¥–∞—á–∞ –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è
                    try:
                        future.result(timeout=1.0)
                    except asyncio.TimeoutError:
                        # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –∑–∞–¥–∞—á–∞ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
                        logger.info("üìç –ó–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")
                        import traceback
                        logger.error(f"Traceback: {traceback.format_exc()}")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç: {e}")
                    import traceback
                    logger.error(f"Traceback: {traceback.format_exc()}")
                    # Fallback - –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ manager
                    self._run_direct_process()
            else:
                logger.error("‚ùå Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—É—Å–∫–∞—é –Ω–∞–ø—Ä—è–º—É—é")
                self._run_direct_process()
            
            important_logger.log_scheduled_task_complete("news_collection")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–±–æ—Ä–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}")
            important_logger.log_error("scheduled_news_collection", str(e))
    
    def _run_direct_process(self):
        """Fallback - –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ manager –±–µ–∑ Telegram –±–æ—Ç–∞."""
        try:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ manager...")
            
            # –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π
            news = self.manager.collect_news()
            if not news:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏")
                return
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            scripts = self.manager.generate_scripts()
            if not scripts:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏")
                return
            
            # –û—Ü–µ–Ω–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            evaluations = self.manager.evaluate_scripts()
            if not evaluations:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏")
                return
            
            # –í—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            winner = self.manager.select_winner()
            if not winner:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π")
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
            image_path = self.manager.create_image()
            if not image_path:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return
            
            # –ù–ï –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä—è–µ–º - –∂–¥–µ–º —Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –æ–¥–æ–±—Ä–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            logger.info("‚è≥ –û–∂–∏–¥–∞–µ—Ç—Å—è –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram –±–æ—Ç")
            logger.info(f"üèÜ –õ—É—á—à–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π: {self.manager.winner_script.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
            logger.info(f"üìä –û—Ü–µ–Ω–∫–∞: {self.manager.winner_score:.1f}/100")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä—è–º–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {str(e)}")
    
    def scheduled_publication(self):
        """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏)."""
        try:
            logger.info("üïê –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            important_logger.log_scheduled_task_start("publication_check")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            if not hasattr(self.manager, 'approved_image') or not self.manager.approved_image:
                logger.info("‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –æ–¥–æ–±—Ä–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                logger.info("üìÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ù–ï –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è - –∂–¥–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ Telegram –±–æ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç)
                if hasattr(self.manager, 'generated_image') and self.manager.generated_image:
                    self._send_publication_reminder()
                else:
                    logger.info("üìù –ö–æ–Ω—Ç–µ–Ω—Ç –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                
                important_logger.log_scheduled_task_complete("publication_check")
                return
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–∏–ª - –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
            logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            approved_image = self.manager.approved_image
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–æ—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if not approved_image.get('image_path'):
                logger.error("‚ùå –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            if not approved_image.get('script'):
                logger.error("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            if not hasattr(self.manager, 'news') or not self.manager.news:
                logger.error("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                return
            
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª
            publication_result = publish_comic_to_channel(
                image_path=approved_image['image_path'],
                script=approved_image['script'],
                news_title=self.manager.news.get('title', '–ù–æ–≤–æ—Å—Ç—å –¥–Ω—è'),
                average_score=approved_image.get('average_score', 0)
            )
            
            if publication_result.get('success'):
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                self.manager.publication_results = publication_result
                self.manager.save_history()
                
                logger.info("‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                logger.info(f"üì∫ –ö–∞–Ω–∞–ª: {publication_result.get('channel_id')}")
                logger.info(f"üìù –ü–æ—Å—Ç ID: {publication_result.get('post_message_id')}")
                logger.info(f"üèÜ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: {approved_image['script'].get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
                
                important_logger.log_publication_success(
                    channel_id=publication_result.get('channel_id'),
                    post_id=publication_result.get('post_message_id'),
                    script_title=approved_image['script'].get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'),
                    average_score=approved_image.get('average_score', 0)
                )
                
                # –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                self.manager.approved_image = None
                
                important_logger.log_scheduled_task_complete("publication_check")
                
            else:
                error_msg = publication_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {error_msg}")
                important_logger.log_error("scheduled_publication", error_msg)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
            important_logger.log_error("scheduled_publication_check", str(e))
    
    def _send_publication_reminder(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–¥–æ–±—Ä–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é."""
        try:
            if self.telegram_bot and hasattr(self.telegram_bot, 'send_publication_reminder'):
                logger.info("üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram")
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ event loop –±–æ—Ç–∞
                if hasattr(self, 'bot_event_loop') and self.bot_event_loop:
                    future = asyncio.run_coroutine_threadsafe(
                        self.telegram_bot.send_publication_reminder(),
                        self.bot_event_loop
                    )
                    try:
                        future.result(timeout=5.0)
                    except asyncio.TimeoutError:
                        logger.warning("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            else:
                logger.info("üìù Telegram –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {str(e)}")
    
    def publish_immediately(self, approved_image):
        """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        try:
            logger.info("üöÄ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–æ—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if not approved_image.get('image_path'):
                logger.error("‚ùå –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
                
            if not approved_image.get('script'):
                logger.error("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
                
            if not hasattr(self.manager, 'news') or not self.manager.news:
                logger.error("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                return False
            
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª
            publication_result = publish_comic_to_channel(
                image_path=approved_image['image_path'],
                script=approved_image['script'],
                news_title=self.manager.news.get('title', '–ù–æ–≤–æ—Å—Ç—å –¥–Ω—è'),
                average_score=approved_image.get('average_score', 0)
            )
            
            if publication_result.get('success'):
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                self.manager.publication_results = publication_result
                self.manager.save_history()
                
                logger.info("‚úÖ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                logger.info(f"üì∫ –ö–∞–Ω–∞–ª: {publication_result.get('channel_id')}")
                logger.info(f"üìù –ü–æ—Å—Ç ID: {publication_result.get('post_message_id')}")
                logger.info(f"üèÜ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: {approved_image['script'].get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
                
                important_logger.log_publication_success(
                    channel_id=publication_result.get('channel_id'),
                    post_id=publication_result.get('post_message_id'),
                    script_title=approved_image['script'].get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'),
                    average_score=approved_image.get('average_score', 0)
                )
                
                # –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                self.manager.approved_image = None
                
                return True
                
            else:
                error_msg = publication_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {error_msg}")
                return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
            return False
    
    def setup_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á."""
        logger.info("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        scheduler.add_daily_task(
            self.scheduled_news_collection,
            NEWS_COLLECTION_HOUR,
            NEWS_COLLECTION_MINUTE,
            job_id="news_collection"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        scheduler.add_daily_task(
            self.scheduled_publication,
            PUBLICATION_TIME_HOUR,
            PUBLICATION_TIME_MINUTE,
            job_id="publication"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        jobs = scheduler.get_jobs()
        logger.info(f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–¥–∞—á: {len(jobs)}")
        for job in jobs:
            logger.info(f"  - {job.id}: –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ")
    
    async def run_telegram_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞."""
        try:
            logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
            self.telegram_bot = ComicBotTelegram()
            # –°–≤—è–∑—ã–≤–∞–µ–º –±–æ—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ manager
            self.telegram_bot.server = self
            self.telegram_bot.manager = self.manager
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π event loop –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
            self.bot_event_loop = asyncio.get_running_loop()
            
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            await self.telegram_bot.run()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞: {str(e)}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
        logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.shutdown()
    
    def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞."""
        if self.running:
            logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...")
            self.running = False
            shutdown_scheduler()
            logger.info("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞."""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ DailyComicBot Server (–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø)")
            logger.info(f"‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {TIMEZONE}")
            logger.info(f"üì∞ –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π: {NEWS_COLLECTION_HOUR:02d}:{NEWS_COLLECTION_MINUTE:02d}")
            logger.info(f"üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è: {PUBLICATION_TIME_HOUR:02d}:{PUBLICATION_TIME_MINUTE:02d}")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
            signal.signal(signal.SIGINT, self.signal_handler)
            signal.signal(signal.SIGTERM, self.signal_handler)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            logger.info("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
            self.setup_scheduler()
            
            # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            logger.info("üìÖ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
            start_scheduler()
            
            self.running = True
            logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
            try:
                asyncio.run(self.run_telegram_bot())
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞: {str(e)}")
                logger.info("üîÑ –°–µ—Ä–≤–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É –±–µ–∑ Telegram –±–æ—Ç–∞...")
                logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º")
                logger.info("üõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                
                # –ï—Å–ª–∏ Telegram –±–æ—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Ç–æ–ª—å–∫–æ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º
                try:
                    while self.running:
                        time.sleep(1)
                except KeyboardInterrupt:
                    logger.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –æ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
            
        except KeyboardInterrupt:
            logger.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –æ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
        finally:
            self.shutdown()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    logger.info(f"ÔøΩ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ["TELEGRAM_BOT_TOKEN", "TELEGRAM_ADMIN_CHAT_ID", "OPENAI_API_KEY", "PERPLEXITY_API_KEY"]
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        return
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    server = DailyComicBotServer()
    server.run()

if __name__ == "__main__":
    main()
