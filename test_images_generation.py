#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–ø-4 —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.
"""

import sys
import json
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).resolve().parent))

from agents.manager import ManagerAgent
from tools.news_tools import get_top_news
from tools.storage_tools import load_scripts, load_evaluations
from utils.logger import info, error, warning

def test_images_generation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–ø-4."""
    
    print("\n" + "="*80)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–¢–ê–ü–ê 3: –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    print("="*80 + "\n")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å
    print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")
    news = get_top_news(force_new=False)
    
    if not news:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å!")
        return False
    
    print(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∞: {news['title'][:50]}...")
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    print("\nü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–º–∏–∫—Å–æ–≤...")
    manager = ManagerAgent()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    print("\nüìö –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –°–¶–ï–ù–ê–†–ò–ï–í:")
    print("-" * 40)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    scripts = load_scripts()
    
    if not scripts:
        print("‚ö†Ô∏è  –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤, –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
        manager.news = news
        scripts = manager.generate_scripts()
        
        if not scripts:
            print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏!")
            return False
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(scripts)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ü–µ–Ω–æ–∫
    print("\n‚öñÔ∏è  –ü–†–û–í–ï–†–ö–ê –û–¶–ï–ù–û–ö:")
    print("-" * 40)
    
    evaluations = load_evaluations()
    
    if not evaluations:
        print("‚ö†Ô∏è  –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫, –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É...")
        manager.scripts = scripts
        evaluations = manager.evaluate_scripts()
        
        if not evaluations:
            print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫–∏!")
            return False
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ—Ü–µ–Ω–æ–∫: {len(evaluations)}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–ø-4 —Å—Ü–µ–Ω–∞—Ä–∏—è
    print("\nüèÜ –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–û–ü-4 –°–¶–ï–ù–ê–†–ò–ï–í:")
    print("-" * 40)
    
    sorted_scripts = sorted(
        evaluations.items(),
        key=lambda x: x[1]['average_score'],
        reverse=True
    )[:4]
    
    top_4_ids = []
    for i, (script_id, eval_data) in enumerate(sorted_scripts):
        top_4_ids.append(script_id)
        print(f"\n{i+1}. –°—Ü–µ–Ω–∞—Ä–∏–π {script_id}:")
        print(f"   –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {eval_data['average_score']:.1f}")
        print(f"   –ê–≤—Ç–æ—Ä: {eval_data.get('writer_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        script = next((s for s in scripts if s.get('script_id') == script_id), None)
        if script:
            print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {script.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    print("\n" + "="*80)
    print("üé® –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:")
    print("="*80 + "\n")
    
    print("üì∏ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–æ–ø-4 —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
    
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–∞–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    generated_images = []
    generation_log = []
    
    # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–∑–æ–≤—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    original_generate_image = manager.generate_image
    
    def track_image_generation(script):
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        script_id = script.get('script_id', 'unknown')
        
        print(f"\nüé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è: {script_id}")
        print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {script.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
        print(f"   –ê–≤—Ç–æ—Ä: {script.get('writer_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Ö–æ–¥–∏—Ç –ª–∏ –≤ —Ç–æ–ø-4
        is_top_4 = script_id in top_4_ids
        print(f"   –í —Ç–æ–ø-4: {'‚úÖ –î–ê' if is_top_4 else '‚ùå –ù–ï–¢'}")
        
        generation_log.append({
            'script_id': script_id,
            'title': script.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'),
            'writer_name': script.get('writer_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'),
            'is_top_4': is_top_4,
            'timestamp': datetime.now().isoformat()
        })
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        result = original_generate_image(script)
        
        if result:
            generated_images.append({
                'script_id': script_id,
                'image_path': result,
                'is_top_4': is_top_4
            })
            print(f"   ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {result}")
        else:
            print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        
        return result
    
    # –ü–æ–¥–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    manager.generate_image = track_image_generation
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
        manager.scripts = scripts
        manager.evaluations = evaluations
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-4 —Å—Ü–µ–Ω–∞—Ä–∏–∏
        top_scripts = manager.select_top_scripts(4)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–ø-4
        images = manager.create_images_for_top_scripts(top_scripts)
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        manager.generate_image = original_generate_image
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "="*80)
    print("üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print("="*80 + "\n")
    
    print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
    print(f"- –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {len(generation_log)}")
    print(f"- –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(generated_images)}")
    print(f"- –ò–∑ —Ç–æ–ø-4: {sum(1 for img in generated_images if img['is_top_4'])}")
    print(f"- –ù–µ –∏–∑ —Ç–æ–ø-4: {sum(1 for img in generated_images if not img['is_top_4'])}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –ö–û–†–†–ï–ö–¢–ù–û–°–¢–ò:")
    print("-" * 40)
    
    errors = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —Ç–æ–ø-4
    for log_entry in generation_log:
        if not log_entry['is_top_4']:
            errors.append(f"–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–æ—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è –ù–ï –∏–∑ —Ç–æ–ø-4: {log_entry['script_id']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–æ–ø-4 –±—ã–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã
    generated_ids = [log['script_id'] for log in generation_log]
    for top_id in top_4_ids:
        if top_id not in generated_ids:
            errors.append(f"–ù–ï –±—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–æ–ø-4 —Å—Ü–µ–Ω–∞—Ä–∏—è: {top_id}")
    
    if errors:
        print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –û–®–ò–ë–ö–ò:")
        for error in errors:
            print(f"   - {error}")
    else:
        print("‚úÖ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —Ç–æ–ø-4 —Å—Ü–µ–Ω–∞—Ä–∏—è!")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\nüíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("-" * 40)
    
    test_file = Path("data/test_results/test_images_generation.json")
    test_file.parent.mkdir(parents=True, exist_ok=True)
    
    test_data = {
        'timestamp': datetime.now().isoformat(),
        'news_title': news['title'],
        'top_4_scripts': [
            {
                'position': i+1,
                'script_id': script_id,
                'average_score': eval_data['average_score'],
                'writer_name': eval_data.get('writer_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'),
                'title': next((s.get('title') for s in scripts if s.get('script_id') == script_id), '–ù–µ –Ω–∞–π–¥–µ–Ω')
            }
            for i, (script_id, eval_data) in enumerate(sorted_scripts)
        ],
        'generation_log': generation_log,
        'generated_images': generated_images,
        'validation': {
            'total_attempts': len(generation_log),
            'successful_generations': len(generated_images),
            'from_top_4': sum(1 for img in generated_images if img['is_top_4']),
            'not_from_top_4': sum(1 for img in generated_images if not img['is_top_4']),
            'errors': errors,
            'is_valid': len(errors) == 0
        }
    }
    
    with open(test_file, 'w', encoding='utf-8') as f:
        json.dump(test_data, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {test_file}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "="*80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("="*80)
    
    if len(errors) == 0 and len(generated_images) == 4:
        print(f"\n‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
        print(f"‚úÖ –í—Å–µ 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Ç–æ–ø-4 —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤!")
    else:
        print(f"\n‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù!")
        if len(errors) > 0:
            print(f"   –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(errors)}")
        if len(generated_images) != 4:
            print(f"   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(generated_images)} (–æ–∂–∏–¥–∞–ª–æ—Å—å 4)")
    
    return len(errors) == 0 and len(generated_images) == 4

if __name__ == "__main__":
    try:
        success = test_images_generation()
        if success:
            print("\n‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            sys.exit(0)
        else:
            print("\n‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω!")
            sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
