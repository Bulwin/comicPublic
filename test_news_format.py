#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–∞.
"""

import sys
import json
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).resolve().parent))

from tools.news_tools import get_top_news, extract_title, extract_news_content
from utils.logger import info, error, warning
from utils.important_logger import log_perplexity_response

def test_news_format():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞."""
    
    print("\n" + "="*80)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–¢–ê–ü–ê 1: –ü–û–õ–£–ß–ï–ù–ò–ï –ù–û–í–û–°–¢–ò")
    print("="*80 + "\n")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å
    print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–Ω—è...")
    news = get_top_news(force_new=True)
    
    if not news:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å!")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
    print("\nüìã –ü–†–û–í–ï–†–ö–ê –§–û–†–ú–ê–¢–ê –ù–û–í–û–°–¢–ò:")
    print("-" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    required_fields = ['title', 'content', 'date', 'source']
    missing_fields = []
    
    for field in required_fields:
        if field not in news:
            missing_fields.append(field)
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}")
        else:
            print(f"‚úÖ –ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    if missing_fields:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}")
        return False
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    print("\nüìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–û–î–ï–†–ñ–ò–ú–û–ì–û:")
    print("-" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    title = news.get('title', '')
    print(f"\nüîç –ó–ê–ì–û–õ–û–í–û–ö:")
    print(f"   –î–ª–∏–Ω–∞: {len(title)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {title}")
    
    if not title:
        print("   ‚ùå –û–®–ò–ë–ö–ê: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—É—Å—Ç–æ–π!")
        return False
    elif len(title) < 10:
        print("   ‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π!")
    else:
        print("   ‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
    content = news.get('content', '')
    print(f"\nüîç –°–û–î–ï–†–ñ–ê–ù–ò–ï:")
    print(f"   –î–ª–∏–Ω–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"   –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {content[:200]}...")
    
    if not content:
        print("   ‚ùå –û–®–ò–ë–ö–ê: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ!")
        return False
    elif len(content) < 50:
        print("   ‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ!")
    else:
        print("   ‚úÖ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï:")
    if content.startswith('**–ó–ê–ì–û–õ–û–í–û–ö**') or '–ó–ê–ì–û–õ–û–í–û–ö:' in content[:100]:
        print("   ‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–û –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏")
        print("   üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É...")
        cleaned_content = extract_news_content(content)
        news['content'] = cleaned_content
        print(f"   ‚úÖ –û—á–∏—â–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {cleaned_content[:100]}...")
    else:
        print("   ‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã
    date = news.get('date', '')
    print(f"\nüîç –î–ê–¢–ê:")
    print(f"   –ó–Ω–∞—á–µ–Ω–∏–µ: {date}")
    try:
        parsed_date = datetime.fromisoformat(date.replace('Z', '+00:00'))
        print(f"   ‚úÖ –î–∞—Ç–∞ –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ ISO")
    except:
        print(f"   ‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –î–∞—Ç–∞ –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    source = news.get('source', '')
    print(f"\nüîç –ò–°–¢–û–ß–ù–ò–ö:")
    print(f"   –ó–Ω–∞—á–µ–Ω–∏–µ: {source}")
    if source == 'perplexity':
        print(f"   ‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
    else:
        print(f"   ‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    print("\nüíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê:")
    print("-" * 40)
    
    test_file = Path("data/test_results/test_news_format.json")
    test_file.parent.mkdir(parents=True, exist_ok=True)
    
    with open(test_file, 'w', encoding='utf-8') as f:
        json.dump({
            'timestamp': datetime.now().isoformat(),
            'news': news,
            'validation': {
                'has_all_fields': len(missing_fields) == 0,
                'title_length': len(title),
                'content_length': len(content),
                'has_duplication': content.startswith('**–ó–ê–ì–û–õ–û–í–û–ö**') or '–ó–ê–ì–û–õ–û–í–û–ö:' in content[:100]
            }
        }, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {test_file}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "="*80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("="*80)
    print(f"\n‚úÖ –ù–û–í–û–°–¢–¨ –ü–û–õ–£–ß–ï–ù–ê –ò –ü–†–û–í–ï–†–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    print(f"\n–§–æ—Ä–º–∞—Ç –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ GPT:")
    print(f"- –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title[:50]}...")
    print(f"- –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"- –î–∞—Ç–∞: {date}")
    print(f"- –ò—Å—Ç–æ—á–Ω–∏–∫: {source}")
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ important_logger
    log_perplexity_response(news)
    
    return True

if __name__ == "__main__":
    try:
        success = test_news_format()
        if success:
            print("\n‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            sys.exit(0)
        else:
            print("\n‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω!")
            sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
