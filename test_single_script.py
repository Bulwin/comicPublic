#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ–¥–Ω–∏–º –∞–≥–µ–Ω—Ç–æ–º.
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã GPT Assistants API.
"""

import sys
import os
import json
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).resolve().parent))

from tools.news_tools import get_top_news
from agents.scriptwriter import ScriptwriterAgent
from utils.logger import info, error, warning
from config import SCRIPTWRITERS

def test_single_scriptwriter():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ–¥–Ω–∏–º –∞–≥–µ–Ω—Ç–æ–º."""
    
    print("=" * 80)
    print("–¢–ï–°–¢ –û–î–ù–û–ì–û –ê–ì–ï–ù–¢–ê-–°–¶–ï–ù–ê–†–ò–°–¢–ê")
    print("=" * 80)
    
    # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
    print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")
    try:
        news = get_top_news()
        if not news:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å")
            return False
        
        print(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∞: {news.get('title', '')[:50]}...")
        print(f"   –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {news.get('content', '')[:100]}...")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        return False
    
    # 2. –í—ã–±–æ—Ä –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–∏–ø A - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π)
    writer_type = "A"
    writer_name = SCRIPTWRITERS[writer_type]["name"]
    
    print(f"\nüé≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞: {writer_name} (—Ç–∏–ø {writer_type})")
    
    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
    try:
        agent = ScriptwriterAgent(writer_type)
        print(f"‚úÖ –ê–≥–µ–Ω—Ç {writer_name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞: {e}")
        return False
    
    # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
    print(f"\nüìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è...")
    try:
        script = agent.create_script(news)
        
        if not script:
            print("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return False
        
        print(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω!")
        print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {script.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {script.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')[:100]}...")
        print(f"   –ü–∞–Ω–µ–ª–µ–π: {len(script.get('panels', []))}")
        print(f"   –ü–æ–¥–ø–∏—Å—å: {script.get('caption', '–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏')[:50]}...")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        return False
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ü–µ–Ω–∞—Ä–∏—è
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ü–µ–Ω–∞—Ä–∏—è...")
    
    required_fields = ["title", "description", "panels", "caption"]
    missing_fields = []
    
    for field in required_fields:
        if field not in script:
            missing_fields.append(field)
    
    if missing_fields:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–Ω–µ–ª–µ–π
    panels = script.get("panels", [])
    if len(panels) != 4:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π: {len(panels)} (–æ–∂–∏–¥–∞–µ—Ç—Å—è 4)")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–Ω–µ–ª–µ–π
    empty_panels = []
    for i, panel in enumerate(panels):
        has_description = bool(panel.get('description', '').strip())
        has_dialog = bool(panel.get('dialog', []))
        has_narration = bool(panel.get('narration', '').strip())
        
        if not (has_description or has_dialog or has_narration):
            empty_panels.append(i + 1)
    
    if empty_panels:
        print(f"‚ö†Ô∏è  –ü—É—Å—Ç—ã–µ –ø–∞–Ω–µ–ª–∏: {empty_panels}")
    else:
        print("‚úÖ –í—Å–µ –ø–∞–Ω–µ–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ–Ω—Ç–µ–Ω—Ç")
    
    # 6. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
    
    test_result = {
        "timestamp": datetime.now().isoformat(),
        "test_type": "single_scriptwriter",
        "writer_type": writer_type,
        "writer_name": writer_name,
        "news": {
            "title": news.get("title", ""),
            "content": news.get("content", "")[:200] + "..." if len(news.get("content", "")) > 200 else news.get("content", "")
        },
        "script": script,
        "validation": {
            "has_all_fields": len(missing_fields) == 0,
            "correct_panel_count": len(panels) == 4,
            "empty_panels": empty_panels,
            "success": len(missing_fields) == 0 and len(panels) == 4
        }
    }
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    results_dir = Path("data/test_results")
    results_dir.mkdir(parents=True, exist_ok=True)
    
    result_file = results_dir / "test_single_script.json"
    
    try:
        with open(result_file, "w", encoding="utf-8") as f:
            json.dump(test_result, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {result_file}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        return False
    
    # 7. –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\n" + "=" * 80)
    if test_result["validation"]["success"]:
        print("üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
        print(f"   ‚úÖ –ê–≥–µ–Ω—Ç {writer_name} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–∑–¥–∞–ª —Å—Ü–µ–Ω–∞—Ä–∏–π")
        print(f"   ‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ 4 –ø–∞–Ω–µ–ª–∏")
        if not empty_panels:
            print(f"   ‚úÖ –í—Å–µ –ø–∞–Ω–µ–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ–Ω—Ç–µ–Ω—Ç")
        else:
            print(f"   ‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∞–Ω–µ–ª–∏ –ø—É—Å—Ç—ã–µ: {empty_panels}")
    else:
        print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù")
        if missing_fields:
            print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
        if len(panels) != 4:
            print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π: {len(panels)}")
    
    print("=" * 80)
    
    return test_result["validation"]["success"]

if __name__ == "__main__":
    success = test_single_scriptwriter()
    sys.exit(0 if success else 1)
