#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –≤ manager.
–≠—Ç–∞–ø 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ manager.
"""

import sys
import os
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).resolve().parent))

def test_manager_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ manager."""
    print("üß™ –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ manager")
    try:
        from agents.manager import ManagerAgent, get_manager
        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π manager —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ manager: {e}")
        return False

def test_manager_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ manager —Å –Ω–æ–≤—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏."""
    print("\nüß™ –¢–µ—Å—Ç 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è manager —Å –Ω–æ–≤—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏")
    try:
        from agents.manager import ManagerAgent
        manager = ManagerAgent()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã (–Ω–µ –¥–æ–ª–∂–Ω—ã —Å–ª–æ–º–∞—Ç—å—Å—è)
        print(f"‚úÖ –°—Ç–∞—Ä—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã:")
        print(f"   - news: {manager.news}")
        print(f"   - scripts: {len(manager.scripts)} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
        print(f"   - evaluations: {len(manager.evaluations)} –æ—Ü–µ–Ω–æ–∫")
        print(f"   - winner_script: {manager.winner_script}")
        print(f"   - image_path: {manager.image_path}")
        print(f"   - publication_results: {manager.publication_results}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤
        print(f"‚úÖ –ù–æ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤:")
        print(f"   - jokes: {len(manager.jokes)} –∞–Ω–µ–∫–¥–æ—Ç–æ–≤")
        print(f"   - selected_joke: {manager.selected_joke}")
        print(f"   - joke_publication_results: {manager.joke_publication_results}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ manager: {e}")
        return False

def test_manager_joke_methods():
    """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤."""
    print("\nüß™ –¢–µ—Å—Ç 3: –ù–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤")
    try:
        from agents.manager import ManagerAgent
        manager = ManagerAgent()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        methods_to_check = [
            'generate_jokes',
            'select_best_joke',
            'get_joke_by_author',
            'publish_joke',
            'run_joke_process'
        ]
        
        for method_name in methods_to_check:
            if hasattr(manager, method_name):
                method = getattr(manager, method_name)
                if callable(method):
                    print(f"‚úÖ –ú–µ—Ç–æ–¥ {method_name} –Ω–∞–π–¥–µ–Ω –∏ –≤—ã–∑—ã–≤–∞–µ–º—ã–π")
                else:
                    print(f"‚ùå {method_name} –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ—Ç–æ–¥–æ–º")
                    return False
            else:
                print(f"‚ùå –ú–µ—Ç–æ–¥ {method_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–µ—Ç–æ–¥–æ–≤: {e}")
        return False

def test_manager_joke_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ manager."""
    print("\nüß™ –¢–µ—Å—Ç 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ manager")
    try:
        from agents.manager import ManagerAgent
        manager = ManagerAgent()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å
        test_news = {
            "title": "–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è manager",
            "content": "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ manager. –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ—à–Ω—ã—Ö –∞–Ω–µ–∫–¥–æ—Ç–æ–≤."
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–µ–∫–¥–æ—Ç—ã —á–µ—Ä–µ–∑ manager
        print("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–µ–∫–¥–æ—Ç—ã —á–µ—Ä–µ–∑ manager...")
        jokes = manager.generate_jokes(test_news)
        
        if not jokes:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç—ã —á–µ—Ä–µ–∑ manager")
            return False
        
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(jokes)} –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ manager")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–Ω–µ–∫–¥–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ manager
        if len(manager.jokes) != len(jokes):
            print(f"‚ùå –ê–Ω–µ–∫–¥–æ—Ç—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ manager: {len(manager.jokes)} != {len(jokes)}")
            return False
        
        print(f"‚úÖ –ê–Ω–µ–∫–¥–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ manager: {len(manager.jokes)} –∞–Ω–µ–∫–¥–æ—Ç–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∞–Ω–µ–∫–¥–æ—Ç
        for i, joke in enumerate(jokes):
            print(f"   –ê–Ω–µ–∫–¥–æ—Ç {i+1}:")
            print(f"     - ID: {joke.get('joke_id', '–ù–µ—Ç ID')}")
            print(f"     - –ê–≤—Ç–æ—Ä: {joke.get('writer_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
            print(f"     - –ó–∞–≥–æ–ª–æ–≤–æ–∫: {joke.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
            print(f"     - –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {joke.get('content', '–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è')[:50]}...")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ manager: {e}")
        return False

def test_manager_joke_selection():
    """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç–∞ —á–µ—Ä–µ–∑ manager."""
    print("\nüß™ –¢–µ—Å—Ç 5: –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç–∞ —á–µ—Ä–µ–∑ manager")
    try:
        from agents.manager import ManagerAgent
        manager = ManagerAgent()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–µ–∫–¥–æ—Ç—ã
        test_news = {
            "title": "–ù–æ–≤–æ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∞ –≤—ã–±–æ—Ä–∞",
            "content": "–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç–∞ —á–µ—Ä–µ–∑ manager."
        }
        
        jokes = manager.generate_jokes(test_news)
        if not jokes:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∞ –≤—ã–±–æ—Ä–∞")
            return False
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –∞–Ω–µ–∫–¥–æ—Ç
        print("üîÑ –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –∞–Ω–µ–∫–¥–æ—Ç...")
        best_joke = manager.select_best_joke()
        
        if not best_joke:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–π –∞–Ω–µ–∫–¥–æ—Ç")
            return False
        
        print(f"‚úÖ –í—ã–±—Ä–∞–Ω –ª—É—á—à–∏–π –∞–Ω–µ–∫–¥–æ—Ç: {best_joke.get('title')} –æ—Ç {best_joke.get('writer_name')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–Ω–µ–∫–¥–æ—Ç —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –≤ manager
        if manager.selected_joke != best_joke:
            print("‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –≤ manager")
            return False
        
        print("‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ manager")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª—É—á—à–µ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç–∞: {e}")
        return False

def test_manager_joke_by_author():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–µ–∫–¥–æ—Ç–∞ –ø–æ –∞–≤—Ç–æ—Ä—É —á–µ—Ä–µ–∑ manager."""
    print("\nüß™ –¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–µ–∫–¥–æ—Ç–∞ –ø–æ –∞–≤—Ç–æ—Ä—É —á–µ—Ä–µ–∑ manager")
    try:
        from agents.manager import ManagerAgent
        manager = ManagerAgent()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–µ–∫–¥–æ—Ç—ã
        test_news = {
            "title": "–ù–æ–≤–æ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∞ –∞–≤—Ç–æ—Ä–æ–≤",
            "content": "–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –ø–æ –∞–≤—Ç–æ—Ä–∞–º —á–µ—Ä–µ–∑ manager."
        }
        
        jokes = manager.generate_jokes(test_news)
        if not jokes:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∞ –∞–≤—Ç–æ—Ä–æ–≤")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–µ–∫–¥–æ—Ç–∞ –ø–æ –∞–≤—Ç–æ—Ä—É
        for author_type in ["A", "B", "C", "D", "E"]:
            joke = manager.get_joke_by_author(author_type)
            if joke:
                print(f"‚úÖ –ê–Ω–µ–∫–¥–æ—Ç –∞–≤—Ç–æ—Ä–∞ {author_type}: {joke.get('title')}")
            else:
                print(f"‚ö†Ô∏è –ê–Ω–µ–∫–¥–æ—Ç –∞–≤—Ç–æ—Ä–∞ {author_type} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –ø–æ –∞–≤—Ç–æ—Ä—É: {e}")
        return False

def test_manager_joke_process():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ manager."""
    print("\nüß™ –¢–µ—Å—Ç 7: –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ manager")
    try:
        from agents.manager import ManagerAgent
        manager = ManagerAgent()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å
        test_news = {
            "title": "–ù–æ–≤–æ—Å—Ç—å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞",
            "content": "–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ manager."
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
        print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤...")
        results = manager.run_joke_process(news=test_news)
        
        if not results.get("success"):
            print("‚ùå –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É—Å–ø–µ—à–Ω–æ")
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results}")
            return False
        
        print("‚úÖ –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
        steps = results.get("steps", {})
        for step_name, step_data in steps.items():
            success = step_data.get("success", False)
            status = "‚úÖ" if success else "‚ùå"
            print(f"   {status} {step_name}: {step_data}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
        return False

def test_manager_news_reuse():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ –º–µ–∂–¥—É –∫–æ–º–∏–∫—Å–∞–º–∏ –∏ –∞–Ω–µ–∫–¥–æ—Ç–∞–º–∏."""
    print("\nüß™ –¢–µ—Å—Ç 8: –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –º–µ–∂–¥—É –∫–æ–º–∏–∫—Å–∞–º–∏ –∏ –∞–Ω–µ–∫–¥–æ—Ç–∞–º–∏")
    try:
        from agents.manager import ManagerAgent
        manager = ManagerAgent()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å –≤ manager (–∏–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∏–∫—Å–æ–≤)
        test_news = {
            "title": "–û–±—â–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –∫–æ–º–∏–∫—Å–æ–≤ –∏ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤",
            "content": "–≠—Ç–∞ –Ω–æ–≤–æ—Å—Ç—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∏ –¥–ª—è –∫–æ–º–∏–∫—Å–æ–≤, –∏ –¥–ª—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤."
        }
        manager.news = test_news
        
        print(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ manager: {test_news['title']}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–µ–∫–¥–æ—Ç—ã –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–æ–≤–æ—Å—Ç–∏ (–¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è)
        print("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–µ–∫–¥–æ—Ç—ã –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–æ–≤–æ—Å—Ç–∏...")
        jokes = manager.generate_jokes()
        
        if not jokes:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç—å—é")
            return False
        
        print(f"‚úÖ –ê–Ω–µ–∫–¥–æ—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤: {len(jokes)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ—Å—Ç—å –≤ –∞–Ω–µ–∫–¥–æ—Ç–∞—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π
        for joke in jokes:
            joke_news = joke.get("news", {})
            if joke_news.get("title") != test_news["title"]:
                print(f"‚ùå –ù–æ–≤–æ—Å—Ç—å –≤ –∞–Ω–µ–∫–¥–æ—Ç–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π")
                return False
        
        print("‚úÖ –ù–æ–≤–æ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ –∞–Ω–µ–∫–¥–æ—Ç–∞—Ö")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        return False

def test_manager_compatibility():
    """–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã manager –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å."""
    print("\nüß™ –¢–µ—Å—Ç 9: –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã manager")
    try:
        from agents.manager import ManagerAgent
        manager = ManagerAgent()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        old_methods = [
            'collect_news',
            'generate_scripts',
            'evaluate_scripts',
            'select_winner',
            'create_image',
            'publish_comic',
            'run_full_process'
        ]
        
        for method_name in old_methods:
            if hasattr(manager, method_name):
                method = getattr(manager, method_name)
                if callable(method):
                    print(f"‚úÖ –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ {method_name} –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    print(f"‚ùå {method_name} –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ—Ç–æ–¥–æ–º")
                    return False
            else:
                print(f"‚ùå –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ {method_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        print("‚úÖ –í—Å–µ —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã manager –¥–æ—Å—Ç—É–ø–Ω—ã - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üé≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –≤ manager")
    print("=" * 60)
    
    tests = [
        test_manager_import,
        test_manager_initialization,
        test_manager_joke_methods,
        test_manager_joke_generation,
        test_manager_joke_selection,
        test_manager_joke_by_author,
        test_manager_joke_process,
        test_manager_news_reuse,
        test_manager_compatibility
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
            else:
                print("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –≤ manager —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        print("\n‚úÖ –≠—Ç–∞–ø 2 –∑–∞–≤–µ—Ä—à–µ–Ω. –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –≠—Ç–∞–ø—É 3.")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
